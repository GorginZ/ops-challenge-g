---
AWSTemplateFormatVersion: 2010-09-09
Description: Application networking stack VPC, Subnets, Natgateway, SGs
Parameters:
  Commit:
    Type: String

  ECRRepositoryName:
    Type: String

  MyCertARN:
    Type: String
  
  MyHostedZoneId:
    Type: String

  RepositoryName:
    Type: String

Resources:
# VPC with public and private subnets TODO: 3rd subnets in AZ3
# ASG instances  sit in private subnets traffic routed to them via 
# ALB sittin in public subnet
  BasicVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref RepositoryName

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: ap-southeast-2a
      VpcId: !Ref BasicVpc
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub public-sn-a${RepositoryName}

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: ap-southeast-2b
      VpcId: !Ref BasicVpc
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub public-sn-b${RepositoryName}


  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: ap-southeast-2a
      VpcId: !Ref BasicVpc
      Tags:
        - Key: Name
          Value: !Sub private-sn-a${RepositoryName}


  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: ap-southeast-2b
      VpcId: !Ref BasicVpc
      Tags:
        - Key: Name
          Value: !Sub private-sn-b${RepositoryName}

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref BasicVpc
      Tags:
        - Key: Name
          Value: !Sub public-rt-${RepositoryName}

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref BasicVpc

  PublicDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  NatA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
          Fn::GetAtt: EipA.AllocationId
      SubnetId:
        Ref: PublicSubnetA
      Tags:
        - Key: Name
          Value: !Sub NAT-A-${RepositoryName}


  EipA:
    DependsOn: InternetGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub EIP-A-${RepositoryName}


  NatB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt: EipB.AllocationId
      SubnetId:
        Ref: PublicSubnetB
      Tags:
        - Key: Name
          Value: !Sub NAT-B-${RepositoryName}


  EipB:
    DependsOn: InternetGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub EIP-B-${RepositoryName}


  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref BasicVpc
      Tags:
        - Key: Name
          Value: !Sub private-rt-a${RepositoryName}


  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref BasicVpc
      Tags:
        - Key: Name
          Value: !Sub private-rt-b${RepositoryName}

  NatRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatA

  NatRouteB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatB

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTableA

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTableB

# trying to lock down vpc need to revise these strict NACLs
# open on ephemeral ports for narrow CIDR blocks
#NACL rules for public subnets
  BasicVpcNACLA:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref BasicVpc
      Tags:
        - Key: Name
          Value: !Sub NACL-A${RepositoryName}

# let internet in
  NACLAInboundClientTraffic:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: BasicVpcNACLA
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

# let private subnetA traffic in
  NACLAInboundPrivateSubnetA:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: BasicVpcNACLA
      RuleNumber: 101
      Protocol: 6
      RuleAction: allow
      CidrBlock: 10.0.2.0/24
      PortRange:
        From: 1024
        To: 65535

# let private subnetB into public
  NACLAInboundPrivateSubnetB:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: BasicVpcNACLA
      RuleNumber: 102
      Protocol: 6
      RuleAction: allow
      CidrBlock: 10.0.3.0/24
      PortRange:
        From: 1024
        To: 65535

# let traffic out from public subnets to internet
  NACLAOutbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: BasicVpcNACLA
      RuleNumber: 100
      Protocol: -1
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

# associates NACL rules with public subnetA
  PublicSubnetNACLAAssociationA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
        SubnetId:
          Ref: PublicSubnetA
        NetworkAclId:
          Ref: BasicVpcNACLA

# associate NACL rules with public subnetB
  PublicSubnetNACLAAssociationB:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetB
      NetworkAclId:
        Ref: BasicVpcNACLA

  # NACLB is private subnet NACL rules
  BasicVpcNACLB:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref BasicVpc
      Tags:
        - Key: Name
          Value: !Sub 'NACL-B${RepositoryName}'
# let public subnet A traffic into private subnets
  NACLBPublicSubnetAInbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: BasicVpcNACLB
      RuleNumber: 101
      Protocol: -1
      RuleAction: allow
      CidrBlock: 10.0.0.0/24

# let public subnet B traffic into private subnets
  NACLBPublicSubnetBInbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: BasicVpcNACLB
      RuleNumber: 102
      Protocol: -1
      RuleAction: allow
      CidrBlock: 10.0.1.0/24

# let private subnet A in
  NACLBInboundRule103:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: BasicVpcNACLB
      RuleNumber: 103
      Protocol: -1
      RuleAction: allow
      CidrBlock: 10.0.2.0/24

# let private subnet B in
  NACLBInboundRule104:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: BasicVpcNACLB
      RuleNumber: 104
      Protocol: -1
      RuleAction: allow
      CidrBlock: 10.0.3.0/24

# pretty sure this is s3, it's broad (/16) without this the instances can't pull image 
# S3 vpc endpoint workaround wasn't working
  NACLBInboundRule105:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: BasicVpcNACLB
      RuleNumber: 105
      Protocol: -1
      RuleAction: allow
      CidrBlock: 52.95.0.0/16

# let traffic out of private subnets
  NACLBOutbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: BasicVpcNACLB
      RuleNumber: 100
      Protocol: -1
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

# above rules associated to private subnet A
  PrivateSubnetNACLBAssociationA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
        SubnetId:
          Ref: PrivateSubnetA
        NetworkAclId:
          Ref: BasicVpcNACLB

# above rules associated to private subnet B
  PrivateSubnetNACLBAssociationB:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetB
      NetworkAclId:
        Ref: BasicVpcNACLB

  # VPC endpoints these are required because of the very restrictive NACLS
  VPCEndpointSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref BasicVpc
      GroupDescription: 'Security group for VPC Endpoint'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "10.0.0.0/16"
          #maybe change to just vpc cidr block to make deleting stuff easier...
          # SourceSecurityGroupId: !Ref LaunchConfigSecurityGroup


  S3Endpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:GetObject'
            Resource: 
              # - 'arn:aws:s3:::prod-region-starport-layer-bucket/*'
              - 'arn:aws:s3:::prod-ap-southeast-2-starport-layer-bucket/*'
      RouteTableIds:
        - !Ref PrivateRouteTableA
        - !Ref PrivateRouteTableB   
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref BasicVpc
      VpcEndpointType: Gateway

  ECRAPIEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      SubnetIds: 
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.api'
      VpcId: !Ref BasicVpc
      VpcEndpointType: Interface
      PrivateDnsEnabled: True
      SecurityGroupIds: 
        - !Ref VPCEndpointSecurityGroup

  ECRDKREndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      SubnetIds: 
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.dkr'
      VpcId: !Ref BasicVpc
      VpcEndpointType: Interface
      PrivateDnsEnabled: True
      SecurityGroupIds: 
        - !Ref VPCEndpointSecurityGroup

  ASGEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      SubnetIds: 
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.autoscaling-plans'
      VpcId: !Ref BasicVpc
      VpcEndpointType: Interface
      PrivateDnsEnabled: True
      SecurityGroupIds: 
        - !Ref VPCEndpointSecurityGroup

  SSMEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      SubnetIds: 
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssm'
      VpcId: !Ref BasicVpc
      VpcEndpointType: Interface
      PrivateDnsEnabled: True
      SecurityGroupIds: 
        - !Ref VPCEndpointSecurityGroup
        - Fn::GetAtt: ALBSecurityGroup.GroupId
        # maybe I need this to allow inboun from instance? the alb sg

# loadbalancer provisioned  in public subnets
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt: ALBSecurityGroup.GroupId
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      Type: application

  ALBHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: '443'
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"

  ALBAliasRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: opschallenge.georgialeng.com.
      Type: A
      HostedZoneId: !Ref MyHostedZoneId
      AliasTarget:
        DNSName: !GetAtt ALB.DNSName 
        HostedZoneId: !GetAtt ALB.CanonicalHostedZoneID

  ALBHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref MyCertARN
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: '/'
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Sub ${RepositoryName}
      Port: 80
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      VpcId:
        Ref: 'VPC'
      Tags:
      - Key: Name
        Value: EC2TargetGroup
      - Key: Port
        Value: 80
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '100'
      - Key: load_balancing.algorithm.type
        Value: 'round_robin'
      - Key: slow_start.duration_seconds
        Value: '300'
      VpcId: !Ref BasicVpc

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${RepositoryName}-SecurityGroup
      VpcId: !Ref BasicVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 443
          CidrIp: "203.34.100.0/24"
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 443
          CidrIp: "49.255.41.116/30"

  LaunchConfigSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${RepositoryName}-SG
      VpcId: !Ref BasicVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId:
            Fn::Select:
              - 0
              - Fn::GetAtt:
                  - ALB
                  - SecurityGroups

  TargetScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      PolicyType: TargetTrackingScaling
      AutoScalingGroupName: !Ref ASG
      EstimatedInstanceWarmup: 400
      TargetTrackingConfiguration: 
        DisableScaleIn: false
        PredefinedMetricSpecification: 
          PredefinedMetricType: 'ASGAverageCPUUtilization'
        TargetValue: 50.00

  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
    Properties:
      AvailabilityZones:
        - ap-southeast-2a
        - ap-southeast-2b
      LaunchTemplate: 
        LaunchTemplateId: !Ref ASGLaunchTemplate
        Version: '1'
      MinSize: '1'
      MaxSize: '10'
      DesiredCapacity: '2'
      TerminationPolicies: [OldestInstance]
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      VPCZoneIdentifier:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB

# tighten up this role
  RootRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
  RolePolicies: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "root"
      PolicyDocument: 
        Statement: 
          - Effect: "Allow"
            Action: "*"
            Resource: "*"
      Roles: 
        - Ref: "RootRole"
  RootInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - Ref: "RootRole"

  ASGLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateData: 
        IamInstanceProfile:
          Name: !Ref RootInstanceProfile
        ImageId: ami-0aab712d6363da7f9
        InstanceInitiatedShutdownBehavior: terminate
        InstanceType: t2.micro
        SecurityGroupIds: 
          - !Ref LaunchConfigSecurityGroup
        UserData:
          Fn::Base64: !Sub
            - |
              #!/usr/bin/env bash
              cd /tmp
              sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
              sudo systemctl enable amazon-ssm-agent
              sudo systemctl start amazon-ssm-agent
              service docker start
              $(aws ecr get-login --no-include-email --region ap-southeast-2)
              docker pull ${ECR_repository}:${Current_commit}
              docker run -p 80:8080 ${ECR_repository}:${Current_commit}
            - Current_commit: !Ref Commit 
              ECR_repository: !Ref ECRRepositoryName
      LaunchTemplateName: !Sub ${RepositoryName}

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref BasicVpc

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnetA, !Ref PublicSubnetB ]]

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnetA, !Ref PrivateSubnetB ]]

  PrivateRouteTables:
    Description: A list of the private routetables
    Value: !Join [ ",", [ !Ref PrivateRouteTableA, !Ref PrivateRouteTableB ]]

  ALBSecurityGroup:
    Description: Security group which will be attached to ALB.
    Value: !Ref LaunchConfigSecurityGroup

  ALBDNSName:
    Value: !GetAtt ALB.DNSName 

  ALBCanonicalHostedZoneId:
    Value: !GetAtt ALB.CanonicalHostedZoneID

  TargetGroup:
    Description: ALB target group
    Value: !Ref ALBTargetGroup
